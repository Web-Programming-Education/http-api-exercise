{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "02ReturnNameJson.svelte",
    "03UrlParams.svelte",
    "04Post.svelte",
    "App.svelte",
    "CodeBlock.svelte",
    "Overview.svelte",
    "Spinner.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { createEventDispatcher } from 'svelte';\nconst dispatch = createEventDispatcher();\nimport CodeBlock from './CodeBlock.svelte';\nlet requestWorked = null;\nlet legalJson = false;\nlet result = null;\nfunction fetchJSON() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let res = yield fetch('/json');\n            if (res.status < 200 || res.status >= 400) {\n                requestWorked = false;\n            }\n            else {\n                requestWorked = true;\n                result = yield res.text();\n                try {\n                    result = JSON.stringify(JSON.parse(result), null, 2);\n                    legalJson = true;\n                }\n                catch (_a) {\n                    legalJson = false;\n                }\n            }\n        }\n        catch (_b) {\n            result = null;\n            requestWorked = false;\n        }\n    });\n}\n</script>\n\n<h1><a href=\"#/\" on:click=\"{() => dispatch('navigate', 0)}\">Zurück</a>Übung 2 (2 Punkte)</h1>\n\n<div class=\"grid\">\n    <div>\n        <h3>Komplexe Daten</h3>\n        <p>\n            Häufig wollen wir mehr als nur einen Text übertragen.<br />\n            Wie wir gelernt haben benötigen wir hierfür ein Serialisierungsformat.<br />\n            Beispiele dafür sind XML oder JSON.\n        </p>\n        <p>\n            Damit wir nicht jedes Mal <code>JSON.stringify(...)</code> aufrufen müssen, gibt es in Express.js\n            eine nützliche Hilfsfunktion: <code>res.json(...)</code> die wir statt <code>res.send()</code> verwenden können.\n        </p>\n        <p>\n            Als Parameter kann ein Javascript Objekt übergeben werden.\n        </p>\n        <h4>Aufgabe</h4>\n        <p>\n            Füge einen RequestHandler für die Route <code>GET /json</code> hinzu und verwende die <code>res.json()</code> \n            Funktion um ein Objekt mit den folgenden Feldern zurückzugeben:\n        </p>\n        <div class=\"center\">\n            <ul>\n                <li>name (string)</li>\n                <li>lastName (string)</li>\n                <li>hobbies (array aus strings)</li>\n                <li>age (number)</li>\n            </ul> \n        </div>\n    </div>\n    <div>\n        <h3>Test</h3>\n        <p>Hier kann die API getestet werden. Das Ergebnis wird unten dargestellt.</p>\n        <button on:click=\"{fetchJSON}\">Abfrage starten</button>\n\n        {#if requestWorked === null}\n            <p>Zum Testen auf den Button klicken</p>\n        {:else if !requestWorked}\n            <p>Die Abfrage hat leider nicht funktioniert!</p>\n        {:else if !legalJson}\n            <p>Das ist leider kein richtiges JSON:</p>\n            <CodeBlock code=\"{result}\"></CodeBlock>\n        {:else}\n            <h4>Ergebnis:</h4>\n            <CodeBlock code=\"{result}\" lang=\"json\"></CodeBlock>\n        {/if}\n    </div>\n</div>\n\n<button on:click=\"{() => dispatch('navigate', 3)}\">Weiter</button>\n\n<style>\n.grid {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 1em;\n    margin-bottom: 3em;\n}\n\n.center {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n@media(min-width: 1000px) {\n    .grid {\n        grid-template-columns: 1fr 1fr;\n    }\n}\n</style>",
    "<script lang=\"ts\">import { createEventDispatcher } from 'svelte';\nconst dispatch = createEventDispatcher();\nimport CodeBlock from './CodeBlock.svelte';\nconst variablePathCode = `// Der Doppelpunkt im Pfad markiert einen Platzhalter\n// Mit req.params.<name> kann darauf zugegriffen werden\napp.get('/return/:variable', (req, res) => {\n  const variable = parseInt(req.params.variable);\n  res.json({variable: variable});\n});`;\nconst queryParamCode = `app.get('/return', (req, res) => {\n  res.send(req.query.variable)\n});`;\nconst parseIntCode = `const text = '5'\n\nconst number = parseInt(text)\n\nif (Number.isNaN(number)) {\n    /* Der Text konnte nicht konvertiert werden\n       weil er keine Zahl darstellt. */\n} else {\n    /* number ist jetzt eine Zahl. */\n    console.log(number)\n}`;\nconst responseCodeCode = `app.get('/return', (req, res) => {\n  if (req.query.variable === undefined) {\n      // res.status(400).send() ODER besser mit Fehlertext:\n      res.status(400).json({\n          error: 'Bad Request: Query parameter \"variable\" missing'\n      });\n  } else {\n    res.json({message: 'success'});\n  }\n});`;\n</script>\n\n<h1><a href=\"#/\" on:click=\"{() => dispatch('navigate', 0)}\">Zurück</a>Übung 3 (6 Punkte)</h1>\n\n<div class=\"grid\">\n    <div>\n        <h3>Parameter</h3>\n        <p>\n            Wie beim Aufruf von Javascript-Funktionen ist es auch bei API-Aufrufen oft hilfreich, Daten als Parameter zu übergeben.<br/>\n            Dazu gibt es im wesentlichen zwei Mechanismen.\n        </p>\n        <p>\n            Beide erlauben es Strings als Parameter zu übergeben. Sie müssen also manuell in den korrekten Datentyp umgewandelt werden.\n        </p>\n\n        <h4>Variable Teile im Pfad der URL</h4>\n        <p>\n            Express erlaubt es im Pfad eines RequestHandlers Platzhalter zu definieren:\n            <CodeBlock lang=\"js\" code={variablePathCode}></CodeBlock>\n        </p>\n\n        <h4>Query-Parameter</h4>\n        <p>\n            Eine andere Möglichkeit ist die Verwendung von Query-Parametern, also dem Teil der in der URL hinter dem ? steht.\n            <a href=\"/return/?variable=query\" target=\"_blank\">http://localhost:3000/return/?variable=query</a><br/>\n            Auf diese Parameter kann wie folgt zugegriffen werden:\n            <CodeBlock lang=\"js\" code={queryParamCode}></CodeBlock>\n        </p>\n\n        <h4>Konvertierung von Datentypen</h4>\n        <p>\n            Häufig muss man Texte in andere Datentypen, wie beispielsweise Zahlen, konvertieren.\n            Das folgende Beispiel zeigt wie das funktioniert:\n        </p>\n        <CodeBlock lang=\"js\" code={parseIntCode}></CodeBlock>\n\n        <h4>Fehlerbehandlung</h4>\n        <p>\n            Sobald Parameter ins Spiel kommen, ist es wichtig darauf zu achten, dass die Werte dem entsprechen was man erwartet.\n            Wenn wir beispielsweise mit einer Zahl rechnen, aber ein String gesendet wird der sich nicht umwandeln lässt gibt es einen Fehler.\n        </p>\n        <p>\n            Im schlimmsten Fall können solche Fehler zu Sicherheitslücken führen. Deshalb sollten sie unbedingt bedacht und behandelt werden.\n        </p>\n        <p>\n            HTTP bietet als Mechanismus, um über Fehler zu informieren sogenannte Status Codes an.<br/>\n            In Express können diese mit der <code>res.status(...)</code> Funktion gesetzt werden.\n            <CodeBlock lang=\"js\" code={responseCodeCode}></CodeBlock>\n        </p>\n\n\n    </div>\n    <div>\n        <h3>Aufgabe</h3>\n        <p>\n            Lege einen RequestHandler für die Route <code>GET /return</code> an.<br />\n            Die API soll eine Ganzzahl als Parameter im Pfad entgegen nehmen.<br />\n            Eine zusätzliche Zahl soll als Query-Parameter <code>plus</code> oder <code>minus</code> übergeben werden können.\n            Das Ergebnis der jeweiligen Operation soll als JSON Objekt mit dem Feld \"result\" zurückgegeben werden.\n            Beispiele sind:\n        </p>\n\n        <div class=\"center\">\n            <ul>\n                <li><a href=\"/return/5?plus=3\" target=\"_blank\">http://localhost:3000/return/5?plus=3</a></li>\n                <li>Erwartetes Ergebnis: <code>{'{\"result\": 8}'}</code></li>\n                <li><a href=\"/return/7?minus=2\" target=\"_blank\">http://localhost:3000/return/7?minus=2</a></li>\n                <li>Erwartetes Ergebnis: <code>{'{\"result\": 5}'}</code></li>\n            </ul>\n        </div>\n\n        <p>\n            Dabei sollen folgende Randbedingungen erfüllt werden:\n        </p>\n\n        <div class=\"center\">\n            <ul>\n                <li>Fehlerbehandlung (HTTP Status 400) für folgende Fälle:\n                    <ul>\n                        <li>Es ist kein Queryparameter angegeben</li>\n                        <li>Es sind beide Queryparameter angegeben (plus und minus)</li>\n                        <li>Einer der 3 Parameter kann nicht als Ganzzahl (integer) geparst werden</li>\n                    </ul>\n                </li>\n                <li>Das Ergebnis muss der jeweiligen mathematischen Funktion entsprechen</li>\n            </ul>\n        </div>\n        <h3>Test</h3>\n        <p>Klickt auf die Beispiellinks und ändert dann die URL im Browser ab um die API zu testen.</p>\n    </div>\n</div>\n\n<button on:click=\"{() => dispatch('navigate', 4)}\">Weiter</button>\n\n<style>\n.grid {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 2em;\n    margin-bottom: 3em;\n}\n\n.center {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n@media(min-width: 1000px) {\n    .grid {\n        grid-template-columns: 1fr 1fr;\n    }\n}\n</style>",
    "<script lang=\"ts\">import { createEventDispatcher } from 'svelte';\nconst dispatch = createEventDispatcher();\nimport CodeBlock from './CodeBlock.svelte';\nconst expressPostCode = `app.post('/post', function(req, res) {\n  console.log(req.body);\n  res.json(req.body.testdaten);\n});`;\nconst statefulDataCode = `// Variable die überlebt solange das Programm läuft.\n// Muss außerhalb eines RequestHandlers stehen.\nlet users = [];\n\napp.post('/register', function(req, res) {\n    \n});`;\nconst randomCode = `// Dort wo benötigt; Erzeugt zufällige Daten.\nconst token = crypto.randomBytes(64).toString('hex');\n`;\nconst passwordCode = `const passwordDerivative = crypto.pbkdf2Sync(\n    password, \n    'randomStringYouShouldChange', \n    100000, \n    64, \n    'sha512'\n).toString('hex');\n`;\n</script>\n\n<h1><a href=\"#/\" on:click=\"{() => dispatch('navigate', 0)}\">Zurück</a>Übung 4 (6 Punkte)</h1>\n\n<div class=\"grid\">\n    <div>\n        <h3>HTTP Post</h3>\n\n        <p>\n            GET-Requests können sehr einfach mit dem Browser ausgetestet werden, \n            da der Browser bei Eingabe einer URL immer einen GET-Request sendet.<br />\n            Um andere Requests zu analysieren bieten sich externe Tools an. \n            Unser Vorschlag ist 'REST Client', eine VS Code Erweiterung.        \n        </p>\n        <p>\n            Installieren mit Ctrl+P: <code>ext install humao.rest-client</code>\n        </p>\n        <p>\n            Füge folgenden RequestHandler zur Anwendung hinzu:\n            <CodeBlock lang=\"js\" code={expressPostCode}></CodeBlock>\n            Starte die Anwendung und öffne die Datei test.http in VS Code.\n            Wenn die Erweiterung installiert ist sollte ganz oben in der Datei \"Send Request\" stehen.\n        </p>\n        <p>\n            Beim Absenden sieht man im Terminal in dem die Anwendung läuft eine Ausgabe der gesendeten Daten.\n            In einem Fenster, dass sich in VS Code öffnet sieht man die Antwort des Serverprogramms.\n        </p>\n\n        <h3>Speichern von Passwörtern</h3>\n        <p>\n            Passwörter sollten niemals direkt abgespeichert werden.\n            Stattdessen sollte aus dem Passwort ein Wert errechnet werden, der nicht wieder in das Passwort zurückgerechnet werden kann.\n            Auf diese Art und Weise ist es weniger schlimm wenn zum Beispiel Benutzerdaten gestohlen werden.\n        </p>\n        <p>\n            Folgender Code kann verwendet werden um ein Passwort auf diese Weise umzurechnen:\n        </p>\n        <CodeBlock lang=\"js\" code={passwordCode}></CodeBlock>\n    </div>\n    <div>\n        <h3>Aufgabe</h3>\n\n        <p>\n            Erstelle einen Endpunkt zum Anlegen von Benutzern <code>POST /register</code><br />\n            Der Endpunkt soll ein JSON Objekt <code>{'{\"username\": \"...\", \"password\": \"...\"}'}</code> annehmen.\n            Falls nicht beide Felder vorhanden und vom Typ string sind \n            (<a href=\"https://www.google.com/?q=javascript+type+string\">Google hilft weiter</a>),\n            soll ein HTTP-Status 400 zurückgegeben werden.\n        </p>\n        <p>\n            Wird eine valide Anfrage gestellt, soll ein User-Objekt mit den Feldern\n            <b>username</b> und <b>passwordDerivative</b> im globalen Array 'users' eingefügt werden.\n            Der Wert des Feldes <b>passwordDerivative</b> soll mit der Methode für das sichere Speichern von Passwörtern erzeugt werden.\n            Anschließend soll mit HTTP-Status '201 - Created' geantwortet werden. \n        </p>\n\n        <CodeBlock lang=\"js\" code={statefulDataCode}></CodeBlock>\n\n        <p>\n            Anschließend soll der Endpunkt <code>POST /login</code> angelegt werden.\n            Der Request soll ebenfalls mit Status 400 abgelehnt werden, falls nicht ein Objekt mit den Feldern\n            <b>username</b> und <b>password</b> vorhanden ist und diese den Typ string haben.\n        </p>\n        <p>\n            Anschließend soll überprüft werden ob Username und Passwort korrekt, also schon im Array vorhanden sind. \n            (Tipp: vor dem Vergleich des Passworts muss dieses natürlich wieder umgerechnet werden)\n        </p>\n\n        <p>\n            Sind Username und Passwort korrekt: Sende HTTP-Status 200.<br>\n            Ist Username oder Passwort falsch: Sende HTTP-Status 401 (Unauthorized)\n        </p>\n    </div>   \n</div>\n\n<style>\n.grid {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 2em;\n    margin-bottom: 3em;\n}\n\n.center {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n@media(min-width: 1000px) {\n    .grid {\n        grid-template-columns: 1fr 1fr;\n    }\n}\n</style>",
    "<script lang=\"ts\">import Overview from './Overview.svelte';\nimport ReturnName from './01ReturnName.svelte';\nimport ReturnNameJson from './02ReturnNameJson.svelte';\nimport UrlParams from './03UrlParams.svelte';\nimport Post from './04Post.svelte';\nlet components = [\n    Overview,\n    ReturnName,\n    ReturnNameJson,\n    UrlParams,\n    Post\n];\nlet currentComponent = 0;\nfunction moveTo(index) {\n    console.log(index);\n    currentComponent = index;\n}\n</script>\n\n<main>\n\t<svelte:component this={components[currentComponent]} on:navigate=\"{event => moveTo(event.detail)}\" />\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: 1200px;\n\t\t}\n\t}\n</style>",
    "<script lang='ts'>import { onMount } from 'svelte';\nimport hljs from './hljs';\nexport let lang = 'js';\nexport let code = '';\n$: if (codeContainer) {\n    renderCode(code, lang);\n}\n;\nlet codeContainer;\nfunction renderCode(code, lang) {\n    let codeBlock = document.createElement('code');\n    codeBlock.setAttribute('lang', lang);\n    codeBlock.innerText = code;\n    for (const child of codeContainer.children) {\n        codeContainer.removeChild(child);\n    }\n    codeContainer.appendChild(codeBlock);\n    hljs.highlightBlock(codeBlock);\n}\n</script>\n\n<div>\n    <pre bind:this={codeContainer}>\n    </pre>\n</div>\n\n<style>\npre {\n    display: inline-block;\n}\n:global(code) {\n    text-align: start;\n    width: auto;\n    min-width: auto;\n    padding: 1em;\n}\n</style>\n",
    "<script lang=\"ts\">import { createEventDispatcher } from 'svelte';\nconst dispatch = createEventDispatcher();\n</script>\n\n<h1>\n    Übersicht\n</h1>\n\n<div class=\"center\">\n    <ul>\n        <li><a href=\"#/\" on:click|preventDefault={() => dispatch('navigate', 1)} >Aufgabe 1 (1 Punkt)</a></li>\n        <li><a href=\"#/\" on:click|preventDefault={() => dispatch('navigate', 2)} >Aufgabe 2 (2 Punkte)</a></li>\n        <li><a href=\"#/\" on:click|preventDefault={() => dispatch('navigate', 3)} >Aufgabe 3 (6 Punkte)</a></li>\n        <li><a href=\"#/\" on:click|preventDefault={() => dispatch('navigate', 4)} >Aufgabe 4 (6 Punkte)</a></li>\n    </ul>\n</div>\n\n<style>\n.center {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\nul {\n    max-width: 500px;\n}\n</style>",
    "<script lang='ts'>export let message = 'Bitte warten...';\n</script>\n\n<div class='container'>\n    <div class='spinner'></div>\n    <span>{message}</span>\n</div>\n\n<style>\n.container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.container > * {\n    min-width: 0;\n    width: auto;\n    gap: 1em;\n}\n\n.container > *:not(:last-child) {\n    margin-bottom: 1em;\n}\n\n.spinner {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #3498db;\n  border-radius: 50%;\n  width: 60px;\n  height: 60px;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}