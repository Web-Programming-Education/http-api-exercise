{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/Overview.svelte","../../src/utils.ts","../../src/Spinner.svelte","../../src/hljs.ts","../../src/CodeBlock.svelte","../../src/01ReturnName.svelte","../../src/02ReturnNameJson.svelte","../../src/03UrlParams.svelte","../../src/04Post.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', `display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ` +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = `data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>`;\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.24.1' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<script lang=\"ts\">\n    import { createEventDispatcher } from 'svelte';\n    const dispatch = createEventDispatcher();        \n</script>\n\n<h1>\n    Übersicht\n</h1>\n\n<div class=\"center\">\n    <ul>\n        <li><a href=\"#/\" on:click|preventDefault={() => dispatch('navigate', 1)} >Aufgabe 1 (1 Punkt)</a></li>\n        <li><a href=\"#/\" on:click|preventDefault={() => dispatch('navigate', 2)} >Aufgabe 2 (2 Punkte)</a></li>\n        <li><a href=\"#/\" on:click|preventDefault={() => dispatch('navigate', 3)} >Aufgabe 3 (6 Punkte)</a></li>\n        <li><a href=\"#/\" on:click|preventDefault={() => dispatch('navigate', 4)} >Aufgabe 4 (6 Punkte)</a></li>\n    </ul>\n</div>\n\n<style>\n.center {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\nul {\n    max-width: 500px;\n}\n</style>","import { onDestroy } from 'svelte';\nexport function onInterval(callback, milliseconds) {\n    const interval = setInterval(callback, milliseconds);\n    onDestroy(() => {\n        clearInterval(interval);\n    });\n}\n","<script lang='ts'>\n    export let message = 'Bitte warten...'\n</script>\n\n<div class='container'>\n    <div class='spinner'></div>\n    <span>{message}</span>\n</div>\n\n<style>\n.container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.container > * {\n    min-width: 0;\n    width: auto;\n    gap: 1em;\n}\n\n.container > *:not(:last-child) {\n    margin-bottom: 1em;\n}\n\n.spinner {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #3498db;\n  border-radius: 50%;\n  width: 60px;\n  height: 60px;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n</style>\n","export default hljs;\n","<script lang='ts'>\n    import { onMount } from 'svelte';\n    import hljs from './hljs';\n\n    export let lang = 'js';\n    export let code = '';\n\n    $: if (codeContainer) { renderCode(code, lang) };\n\n    let codeContainer;\n\n    function renderCode(code, lang) {\n        let codeBlock = document.createElement('code');\n        codeBlock.setAttribute('lang', lang);\n        codeBlock.innerText = code;\n\n        for (const child of codeContainer.children) {\n            codeContainer.removeChild(child);\n        }\n        codeContainer.appendChild(codeBlock);\n        hljs.highlightBlock(codeBlock);\n    }\n</script>\n\n<div>\n    <pre bind:this={codeContainer}>\n    </pre>\n</div>\n\n<style>\npre {\n    display: inline-block;\n}\n:global(code) {\n    text-align: start;\n    width: auto;\n    min-width: auto;\n    padding: 1em;\n}\n</style>\n","<script lang=\"ts\">\n    import { createEventDispatcher } from 'svelte';\n    const dispatch = createEventDispatcher();\n\n    import { onInterval } from \"./utils\";\n\n    import Spinner from \"./Spinner.svelte\";\n    import CodeBlock from './CodeBlock.svelte';\n\n    let requestWorked: boolean = null;\n    let name: string = null;\n\n    const expressCode = \n`// Mit app.get kann ein \"RequestHandler\" angelegt werden\n// Der erste Parameter ist der Pfad für den der Handler aufgerufen wird\n// der zweite Teil eine Funktion die jedes Mal aufgerufen wird wenn \n// eine passende Anfrage ankommt.\napp.get('/name', (req, res) => {\n    // Der req Parameter enthält alles zur Anfrage.\n    // Mithilfe des res Parameters können wir die Antwort verändern.\n    // In diesem Beispiel senden wir einfach unseren Namen als Text:\n    res.send(\"<Euer Name>\");\n});\n\napp.listen(...\n`\n\n    async function fetchName() {\n        try {\n            let res = await fetch('/name');\n            if (res.status < 200 || res.status >= 400) {\n                requestWorked = false;\n            } else {\n                requestWorked = true;\n                name = await res.text()\n            }\n        } catch {\n            requestWorked = false\n        }\n    }\n\n    onInterval(fetchName, 1000)\n</script>\n\n<h1><a href=\"#/\" on:click=\"{() => dispatch('navigate', 0)}\">Zurück</a>Übung 1 (1 Punkt)</h1>\n\n{#if requestWorked === null}\n    <Spinner></Spinner>\n{:else if !requestWorked}\n    <div>Antworte auf die HTTP Anfrage \n        <pre><code lang='http'>\n        GET /name HTTP/1.1\n        </code></pre>\n        mit deinem Namen (als Text)\n\n\n        <CodeBlock code=\"{expressCode}\" lang=\"js\"></CodeBlock>\n    </div>\n{:else if typeof(name) !== 'string' || name === '' || name === '<Euer Name>'}\n    <div>Das ist doch nicht dein Name!</div>\n{:else}\n    <h3>Gut gemacht {name}!</h3>\n    <p>Weiter gehts mit einem Klick auf den Button</p>\n    \n    <button on:click=\"{() => dispatch('navigate', 2)}\">Weiter</button>\n{/if}\n\n<style>\n    \n</style>","<script lang=\"ts\">\n    import { createEventDispatcher } from 'svelte';\n    const dispatch = createEventDispatcher();\n\n    import CodeBlock from './CodeBlock.svelte';\n\n    let requestWorked: boolean = null;\n    let legalJson = false;\n    let result: string = null;\n\n    async function fetchJSON() {\n        try {\n            let res = await fetch('/json');\n            if (res.status < 200 || res.status >= 400) {\n                requestWorked = false;\n            } else {\n                requestWorked = true;\n\n                result = await res.text();\n                try {\n                    result = JSON.stringify(JSON.parse(result), null, 2);\n                    legalJson = true;\n                } catch {\n                    legalJson = false;\n                }\n            }\n        } catch {\n            result = null;\n            requestWorked = false;\n        }\n    }\n</script>\n\n<h1><a href=\"#/\" on:click=\"{() => dispatch('navigate', 0)}\">Zurück</a>Übung 2 (2 Punkte)</h1>\n\n<div class=\"grid\">\n    <div>\n        <h3>Komplexe Daten</h3>\n        <p>\n            Häufig wollen wir mehr als nur einen Text übertragen.<br />\n            Wie wir gelernt haben benötigen wir hierfür ein Serialisierungsformat.<br />\n            Beispiele dafür sind XML oder JSON.\n        </p>\n        <p>\n            Damit wir nicht jedes Mal <code>JSON.stringify(...)</code> aufrufen müssen, gibt es in Express.js\n            eine nützliche Hilfsfunktion: <code>res.json(...)</code> die wir statt <code>res.send()</code> verwenden können.\n        </p>\n        <p>\n            Als Parameter kann ein Javascript Objekt übergeben werden.\n        </p>\n        <h4>Aufgabe</h4>\n        <p>\n            Füge einen RequestHandler für die Route <code>GET /json</code> hinzu und verwende die <code>res.json()</code> \n            Funktion um ein Objekt mit den folgenden Feldern zurückzugeben:\n        </p>\n        <div class=\"center\">\n            <ul>\n                <li>name (string)</li>\n                <li>lastName (string)</li>\n                <li>hobbies (array aus strings)</li>\n                <li>age (number)</li>\n            </ul> \n        </div>\n    </div>\n    <div>\n        <h3>Test</h3>\n        <p>Hier kann die API getestet werden. Das Ergebnis wird unten dargestellt.</p>\n        <button on:click=\"{fetchJSON}\">Abfrage starten</button>\n\n        {#if requestWorked === null}\n            <p>Zum Testen auf den Button klicken</p>\n        {:else if !requestWorked}\n            <p>Die Abfrage hat leider nicht funktioniert!</p>\n        {:else if !legalJson}\n            <p>Das ist leider kein richtiges JSON:</p>\n            <CodeBlock code=\"{result}\"></CodeBlock>\n        {:else}\n            <h4>Ergebnis:</h4>\n            <CodeBlock code=\"{result}\" lang=\"json\"></CodeBlock>\n        {/if}\n    </div>\n</div>\n\n<button on:click=\"{() => dispatch('navigate', 3)}\">Weiter</button>\n\n<style>\n.grid {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 1em;\n    margin-bottom: 3em;\n}\n\n.center {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n@media(min-width: 1000px) {\n    .grid {\n        grid-template-columns: 1fr 1fr;\n    }\n}\n</style>","<script lang=\"ts\">\n    import { createEventDispatcher } from 'svelte';\n    const dispatch = createEventDispatcher();\n\n    import CodeBlock from './CodeBlock.svelte';\n\n    const variablePathCode =\n`// Der Doppelpunkt im Pfad markiert einen Platzhalter\n// Mit req.params.<name> kann darauf zugegriffen werden\napp.get('/return/:variable', (req, res) => {\n  const variable = parseInt(req.params.variable);\n  res.json({variable: variable});\n});`\n\n    const queryParamCode =\n`app.get('/return', (req, res) => {\n  res.send(req.query.variable)\n});`\n\n    const parseIntCode =\n`const text = '5'\n\nconst number = parseInt(text)\n\nif (Number.isNaN(number)) {\n    /* Der Text konnte nicht konvertiert werden\n       weil er keine Zahl darstellt. */\n} else {\n    /* number ist jetzt eine Zahl. */\n    console.log(number)\n}`\n\n    const responseCodeCode =\n`app.get('/return', (req, res) => {\n  if (req.query.variable === undefined) {\n      // res.status(400).send() ODER besser mit Fehlertext:\n      res.status(400).json({\n          error: 'Bad Request: Query parameter \"variable\" missing'\n      });\n  } else {\n    res.json({message: 'success'});\n  }\n});`\n</script>\n\n<h1><a href=\"#/\" on:click=\"{() => dispatch('navigate', 0)}\">Zurück</a>Übung 3 (6 Punkte)</h1>\n\n<div class=\"grid\">\n    <div>\n        <h3>Parameter</h3>\n        <p>\n            Wie beim Aufruf von Javascript-Funktionen ist es auch bei API-Aufrufen oft hilfreich, Daten als Parameter zu übergeben.<br/>\n            Dazu gibt es im wesentlichen zwei Mechanismen.\n        </p>\n        <p>\n            Beide erlauben es Strings als Parameter zu übergeben. Sie müssen also manuell in den korrekten Datentyp umgewandelt werden.\n        </p>\n\n        <h4>Variable Teile im Pfad der URL</h4>\n        <p>\n            Express erlaubt es im Pfad eines RequestHandlers Platzhalter zu definieren:\n            <CodeBlock lang=\"js\" code={variablePathCode}></CodeBlock>\n        </p>\n\n        <h4>Query-Parameter</h4>\n        <p>\n            Eine andere Möglichkeit ist die Verwendung von Query-Parametern, also dem Teil der in der URL hinter dem ? steht.\n            <a href=\"/return/?variable=query\" target=\"_blank\">http://localhost:3000/return/?variable=query</a><br/>\n            Auf diese Parameter kann wie folgt zugegriffen werden:\n            <CodeBlock lang=\"js\" code={queryParamCode}></CodeBlock>\n        </p>\n\n        <h4>Konvertierung von Datentypen</h4>\n        <p>\n            Häufig muss man Texte in andere Datentypen, wie beispielsweise Zahlen, konvertieren.\n            Das folgende Beispiel zeigt wie das funktioniert:\n        </p>\n        <CodeBlock lang=\"js\" code={parseIntCode}></CodeBlock>\n\n        <h4>Fehlerbehandlung</h4>\n        <p>\n            Sobald Parameter ins Spiel kommen, ist es wichtig darauf zu achten, dass die Werte dem entsprechen was man erwartet.\n            Wenn wir beispielsweise mit einer Zahl rechnen, aber ein String gesendet wird der sich nicht umwandeln lässt gibt es einen Fehler.\n        </p>\n        <p>\n            Im schlimmsten Fall können solche Fehler zu Sicherheitslücken führen. Deshalb sollten sie unbedingt bedacht und behandelt werden.\n        </p>\n        <p>\n            HTTP bietet als Mechanismus, um über Fehler zu informieren sogenannte Status Codes an.<br/>\n            In Express können diese mit der <code>res.status(...)</code> Funktion gesetzt werden.\n            <CodeBlock lang=\"js\" code={responseCodeCode}></CodeBlock>\n        </p>\n\n\n    </div>\n    <div>\n        <h3>Aufgabe</h3>\n        <p>\n            Lege einen RequestHandler für die Route <code>GET /return</code> an.<br />\n            Die API soll eine Ganzzahl als Parameter im Pfad entgegen nehmen.<br />\n            Eine zusätzliche Zahl soll als Query-Parameter <code>plus</code> oder <code>minus</code> übergeben werden können.\n            Das Ergebnis der jeweiligen Operation soll als JSON Objekt mit dem Feld \"result\" zurückgegeben werden.\n            Beispiele sind:\n        </p>\n\n        <div class=\"center\">\n            <ul>\n                <li><a href=\"/return/5?plus=3\" target=\"_blank\">http://localhost:3000/return/5?plus=3</a></li>\n                <li>Erwartetes Ergebnis: <code>{'{\"result\": 8}'}</code></li>\n                <li><a href=\"/return/7?minus=2\" target=\"_blank\">http://localhost:3000/return/7?minus=2</a></li>\n                <li>Erwartetes Ergebnis: <code>{'{\"result\": 5}'}</code></li>\n            </ul>\n        </div>\n\n        <p>\n            Dabei sollen folgende Randbedingungen erfüllt werden:\n        </p>\n\n        <div class=\"center\">\n            <ul>\n                <li>Fehlerbehandlung (HTTP Status 400) für folgende Fälle:\n                    <ul>\n                        <li>Es ist kein Queryparameter angegeben</li>\n                        <li>Es sind beide Queryparameter angegeben (plus und minus)</li>\n                        <li>Einer der 3 Parameter kann nicht als Ganzzahl (integer) geparst werden</li>\n                    </ul>\n                </li>\n                <li>Das Ergebnis muss der jeweiligen mathematischen Funktion entsprechen</li>\n            </ul>\n        </div>\n        <h3>Test</h3>\n        <p>Klickt auf die Beispiellinks und ändert dann die URL im Browser ab um die API zu testen.</p>\n    </div>\n</div>\n\n<button on:click=\"{() => dispatch('navigate', 4)}\">Weiter</button>\n\n<style>\n.grid {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 2em;\n    margin-bottom: 3em;\n}\n\n.center {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n@media(min-width: 1000px) {\n    .grid {\n        grid-template-columns: 1fr 1fr;\n    }\n}\n</style>","<script lang=\"ts\">\n    import { createEventDispatcher } from 'svelte';\n    const dispatch = createEventDispatcher();\n\n    import CodeBlock from './CodeBlock.svelte';\n    \n    const expressPostCode = \n`app.post('/post', function(req, res) {\n  console.log(req.body);\n  res.json(req.body.testdaten);\n});`\n\n    const statefulDataCode = \n`// Variable die überlebt solange das Programm läuft.\n// Muss außerhalb eines RequestHandlers stehen.\nlet users = [];\n\napp.post('/register', function(req, res) {\n    \n});`\n\n    const randomCode = \n`// Dort wo benötigt; Erzeugt zufällige Daten.\nconst token = crypto.randomBytes(64).toString('hex');\n`\n    \n    const passwordCode = \n`const passwordDerivative = crypto.pbkdf2Sync(\n    password, \n    'randomStringYouShouldChange', \n    100000, \n    64, \n    'sha512'\n).toString('hex');\n`\n</script>\n\n<h1><a href=\"#/\" on:click=\"{() => dispatch('navigate', 0)}\">Zurück</a>Übung 4 (6 Punkte)</h1>\n\n<div class=\"grid\">\n    <div>\n        <h3>HTTP Post</h3>\n\n        <p>\n            GET-Requests können sehr einfach mit dem Browser ausgetestet werden, \n            da der Browser bei Eingabe einer URL immer einen GET-Request sendet.<br />\n            Um andere Requests zu analysieren bieten sich externe Tools an. \n            Unser Vorschlag ist 'REST Client', eine VS Code Erweiterung.        \n        </p>\n        <p>\n            Installieren mit Ctrl+P: <code>ext install humao.rest-client</code>\n        </p>\n        <p>\n            Füge folgenden RequestHandler zur Anwendung hinzu:\n            <CodeBlock lang=\"js\" code={expressPostCode}></CodeBlock>\n            Starte die Anwendung und öffne die Datei test.http in VS Code.\n            Wenn die Erweiterung installiert ist sollte ganz oben in der Datei \"Send Request\" stehen.\n        </p>\n        <p>\n            Beim Absenden sieht man im Terminal in dem die Anwendung läuft eine Ausgabe der gesendeten Daten.\n            In einem Fenster, dass sich in VS Code öffnet sieht man die Antwort des Serverprogramms.\n        </p>\n\n        <h3>Speichern von Passwörtern</h3>\n        <p>\n            Passwörter sollten niemals direkt abgespeichert werden.\n            Stattdessen sollte aus dem Passwort ein Wert errechnet werden, der nicht wieder in das Passwort zurückgerechnet werden kann.\n            Auf diese Art und Weise ist es weniger schlimm wenn zum Beispiel Benutzerdaten gestohlen werden.\n        </p>\n        <p>\n            Folgender Code kann verwendet werden um ein Passwort auf diese Weise umzurechnen:\n        </p>\n        <CodeBlock lang=\"js\" code={passwordCode}></CodeBlock>\n    </div>\n    <div>\n        <h3>Aufgabe</h3>\n\n        <p>\n            Erstelle einen Endpunkt zum Anlegen von Benutzern <code>POST /register</code><br />\n            Der Endpunkt soll ein JSON Objekt <code>{'{\"username\": \"...\", \"password\": \"...\"}'}</code> annehmen.\n            Falls nicht beide Felder vorhanden und vom Typ string sind \n            (<a href=\"https://www.google.com/?q=javascript+type+string\">Google hilft weiter</a>),\n            soll ein HTTP-Status 400 zurückgegeben werden.\n        </p>\n        <p>\n            Wird eine valide Anfrage gestellt, soll ein User-Objekt mit den Feldern\n            <b>username</b> und <b>passwordDerivative</b> im globalen Array 'users' eingefügt werden.\n            Der Wert des Feldes <b>passwordDerivative</b> soll mit der Methode für das sichere Speichern von Passwörtern erzeugt werden.\n            Anschließend soll mit HTTP-Status '201 - Created' geantwortet werden. \n        </p>\n\n        <CodeBlock lang=\"js\" code={statefulDataCode}></CodeBlock>\n\n        <p>\n            Anschließend soll der Endpunkt <code>POST /login</code> angelegt werden.\n            Der Request soll ebenfalls mit Status 400 abgelehnt werden, falls nicht ein Objekt mit den Feldern\n            <b>username</b> und <b>password</b> vorhanden ist und diese den Typ string haben.\n        </p>\n        <p>\n            Anschließend soll überprüft werden ob Username und Passwort korrekt, also schon im Array vorhanden sind. \n            (Tipp: vor dem Vergleich des Passworts muss dieses natürlich wieder umgerechnet werden)\n        </p>\n\n        <p>\n            Sind Username und Passwort korrekt: Sende HTTP-Status 200.<br>\n            Ist Username oder Passwort falsch: Sende HTTP-Status 401 (Unauthorized)\n        </p>\n    </div>   \n</div>\n\n<style>\n.grid {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 2em;\n    margin-bottom: 3em;\n}\n\n.center {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n@media(min-width: 1000px) {\n    .grid {\n        grid-template-columns: 1fr 1fr;\n    }\n}\n</style>","<script lang=\"ts\">\n\timport Overview from './Overview.svelte';\n\timport ReturnName from './01ReturnName.svelte';\n\timport ReturnNameJson from './02ReturnNameJson.svelte';\n\timport UrlParams from './03UrlParams.svelte';\n\timport Post from './04Post.svelte';\n\n\tlet components = [\n\t\tOverview,\n\t\tReturnName, \n\t\tReturnNameJson,\n\t\tUrlParams,\n\t\tPost\n\t];\n\n\tlet currentComponent = 0;\n\n\tfunction moveTo(index) {\n\t\tconsole.log(index)\n\t\tcurrentComponent = index;\n\t}\n</script>\n\n<main>\n\t<svelte:component this={components[currentComponent]} on:navigate=\"{event => moveTo(event.detail)}\" />\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: 1200px;\n\t\t}\n\t}\n</style>","import App from './App.svelte';\nconst app = new App({\n    target: document.body\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","prevent_default","preventDefault","call","this","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","current_component","set_current_component","component","get_current_component","Error","createEventDispatcher","type","detail","callbacks","$$","e","createEvent","initCustomEvent","custom_event","slice","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","flushing","seen_callbacks","Set","flush","i","length","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","d","create_component","mount_component","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","prop_values","bound","context","Map","skip_bound","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","$destroy","index","indexOf","splice","$$props","obj","$$set","keys","dispatch","onInterval","milliseconds","interval","setInterval","clearInterval","message","hljs","codeContainer","lang","code","codeBlock","innerText","child","highlightBlock","renderCode","__awaiter","thisArg","_arguments","P","generator","reject","fulfilled","step","next","rejected","result","done","apply","requestWorked","res","fetch","status","_a","legalJson","JSON","stringify","parse","_b","currentComponent","moveTo","console","log","Overview","ReturnName","ReturnNameJson","UrlParams","Post","body"],"mappings":"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"}